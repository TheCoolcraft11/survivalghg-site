import {dom, library} from "@fortawesome/fontawesome-svg-core";
import {faCogs} from "@fortawesome/free-solid-svg-icons";
import _ from "lodash";
import {disconnect} from "./wetty/disconnect.js";
import {overlay} from "./wetty/disconnect/elements.js";
import {verifyPrompt} from "./wetty/disconnect/verify.js";
import {FileDownloader} from "./wetty/download.js";
import {FlowControlClient} from "./wetty/flowcontrol.js";
import {mobileKeyboard} from "./wetty/mobile.js";
import {socket} from "./wetty/socket.js";
import {terminal} from "./wetty/term.js";
library.add(faCogs);
dom.watch();
function onResize(term) {
  return function resize() {
    term.resizeTerm();
  };
}
socket.on("connect", () => {
  const term = terminal(socket);
  if (_.isUndefined(term))
    return;
  if (!_.isNull(overlay))
    overlay.style.display = "none";
  window.addEventListener("beforeunload", verifyPrompt, false);
  window.addEventListener("resize", onResize(term), false);
  term.resizeTerm();
  term.focus();
  mobileKeyboard();
  const fileDownloader = new FileDownloader();
  const fcClient = new FlowControlClient();
  term.onData((data) => {
    socket.emit("input", data);
  });
  term.onResize((size) => {
    socket.emit("resize", size);
  });
  socket.on("data", async (data) => {
    const remainingData = await fileDownloader.buffer(data);
    const downloadLength = data.length - remainingData.length;
    if (downloadLength && fcClient.needsCommit(downloadLength)) {
      socket.emit("commit", fcClient.ackBytes);
    }
    if (remainingData) {
      if (fcClient.needsCommit(remainingData.length)) {
        term.write(remainingData, () => socket.emit("commit", fcClient.ackBytes));
      } else {
        term.write(remainingData);
      }
    }
  }).on("login", () => {
    term.writeln("");
    term.resizeTerm();
  }).on("logout", disconnect).on("disconnect", disconnect).on("error", (err) => {
    if (err)
      disconnect(err);
  });
});
